/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sample_management;

import db_connect.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nazal
 */
public class homePage extends javax.swing.JFrame {

    /**
     * Creates new form homePage
     */
    public homePage() {
        initComponents();
        populateHomeTableWithData();
        back_btn.setVisible(false);
        jButton1.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        search_field = new javax.swing.JTextField();
        apply_btn = new javax.swing.JButton();
        back_btn = new javax.swing.JButton();
        filter = new javax.swing.JComboBox<>();
        search_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(450, 150));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        search_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_fieldActionPerformed(evt);
            }
        });
        getContentPane().add(search_field, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 84, 299, 37));

        apply_btn.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        apply_btn.setText("Apply");
        apply_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apply_btnActionPerformed(evt);
            }
        });
        getContentPane().add(apply_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(792, 80, 86, 46));

        back_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample_management/back.png"))); // NOI18N
        back_btn.setText("Back");
        back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_btnActionPerformed(evt);
            }
        });
        getContentPane().add(back_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 78, 121, 48));

        filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "PDF", "Video", "Image" }));
        getContentPane().add(filter, new org.netbeans.lib.awtextra.AbsoluteConstraints(699, 80, 75, 46));

        search_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample_management/search.png"))); // NOI18N
        search_btn.setText("search");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });
        getContentPane().add(search_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 78, -1, 48));

        jLabel1.setFont(new java.awt.Font("Garamond", 1, 36)); // NOI18N
        jLabel1.setText("HOME");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 12, 134, 48));

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setFillsViewportHeight(true);
        jTable1.setRowHeight(20);
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("Star");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(147, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void populateHomeTableWithData() {
    try {
        Connection con = ConnectionProvider.getCon();
        String userName = new login().user_name;
        userName = "test1";

        // Create a PreparedStatement with a parameterized query to get starred file names from the star table
        String selectStarredFilesQuery = "SELECT * FROM files WHERE public_or_private = ? && name!=?";
        PreparedStatement starredFilesStatement = con.prepareStatement(selectStarredFilesQuery);

        // Set the parameter value
        starredFilesStatement.setInt(1, 1);
        starredFilesStatement.setString(2, "test1");


        // Execute the query to get starred file names
        ResultSet starredFilesResultSet = starredFilesStatement.executeQuery();

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make all cells non-editable
                return false;
            }
        };

        model.setColumnIdentifiers(new Object[]{"Index", "file_name", "file_type", "description", "access" ,"user"}); // Add "Star" column

        int rowIndex = 1; // Initialize the index
        Random random = new Random();

        // Iterate through starred file names from the star table
        while (starredFilesResultSet.next()) {
            String starredFileName = starredFilesResultSet.getString("file_name");

            // Create a PreparedStatement to get file data from the files table based on starred file name
            String selectFilesQuery = "SELECT * FROM files WHERE file_name = ?";
            PreparedStatement filesStatement = con.prepareStatement(selectFilesQuery);

            // Set the parameter value
            filesStatement.setString(1, starredFileName);

            // Execute the query to get file data
            ResultSet filesResultSet = filesStatement.executeQuery();

            while (filesResultSet.next()) {
                String accessValue = filesResultSet.getInt("public_or_private") == 1 ? "Public" : "Private"; // Convert 1 to "Public" and 0 to "Private"
                boolean isStarred = random.nextBoolean(); // Generate random star data

                // Add data to the table model
                model.addRow(new Object[]{rowIndex, filesResultSet.getString("file_name"), filesResultSet.getString("file_type"), filesResultSet.getString("description"), accessValue, filesResultSet.getString("name")}); // Add "Index", "accessValue," and "isStarred"
                rowIndex++; // Increment the index
            }

            // Close the filesResultSet and filesStatement
            filesResultSet.close();
            filesStatement.close();
        }

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setModel(model);

        int[] columnWidths = {70, 150, 150, 150, 100,100}; // Adjust the values as needed for each column, including the "Index" and "access" columns
        int columnIndex = 0;

        for (int width : columnWidths) {
            TableColumn column = jTable1.getColumnModel().getColumn(columnIndex);
            column.setPreferredWidth(width);
            columnIndex++;
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Connection error: " + e.getMessage());
    }
}
    private void search_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_fieldActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_search_fieldActionPerformed

    private void apply_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apply_btnActionPerformed
     back_btn.setVisible(true);

    String selectedFilter = (String) filter.getSelectedItem(); // Assuming filter is the name of your JComboBox
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    if (selectedFilter != null) {
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
        jTable1.setRowSorter(rowSorter);

        // Define the filter condition based on the selected filter
        RowFilter<DefaultTableModel, Object> rowFilter = null;

        if (selectedFilter.equals("PDF")) {
            rowFilter = RowFilter.regexFilter("PDF", 2); // Assuming the file_type column is at index 2
        } else if (selectedFilter.equals("Video")) {
            rowFilter = RowFilter.regexFilter("Video", 2); // Assuming the file_type column is at index 2
        }

        if (rowFilter != null) {
            rowSorter.setRowFilter(rowFilter);
        }
    }
    }//GEN-LAST:event_apply_btnActionPerformed

    private void back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_btnActionPerformed
        // TODO add your handling code here:
        //        populateTableWithData();
//        back_btn.setVisible(false);
//        apply_btn.setVisible(false);
//search_field.setText("");
jButton1.setVisible(false);
filter.setSelectedItem("All");
apply_btnActionPerformed(evt);
populateHomeTableWithData();
    }//GEN-LAST:event_back_btnActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        // TODO add your handling code here:
          String file_name = search_field.getText();
    if (file_name.equals("")) {
        JOptionPane.showMessageDialog(null, "Enter the file name");
        return;
    } else {
        back_btn.setVisible(true);
        jButton1.setVisible(true);
//        star_btn.setVisible(true);
//        back_btn.setVisible(true);


        try {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    // Make all cells non-editable
                    return false;
                }
            };

            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            jTable1.setModel(model);
            model.setColumnIdentifiers(new Object[]{"index","file_name", "file_type", "description", "access"});

            ResultSet rs = st.executeQuery("SELECT * FROM files WHERE file_name='" + file_name + "'");
            int rowIndex = 1; // Initialize the index

            if (rs.next()) {
                int publicOrPrivate = rs.getInt("public_or_private");
                String accessValue = (publicOrPrivate == 1) ? "Public" : "Private";
                model.addRow(new Object[]{rowIndex,rs.getString("file_name"), rs.getString("file_type"), rs.getString("description"), accessValue});
                rowIndex++;
            } else {
                JOptionPane.showMessageDialog(null, "File not found");
                back_btn.setVisible(false);
//                edit_btn.setVisible(false);

                populateHomeTableWithData();
                return;
            }
//            edit_btn.setVisible(true);
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            jTable1.setModel(model);
            int[] columnWidths = {100, 150, 150, 200, 100}; // Adjust the values as needed for each column
            int columnIndex = 0;

            for (int width : columnWidths) {
                TableColumn column = jTable1.getColumnModel().getColumn(columnIndex);
                column.setPreferredWidth(width);
                columnIndex++;
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_search_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
          try {
    Connection con = ConnectionProvider.getCon();
    Statement st = con.createStatement();
    
    String file_name = search_field.getText();
    String userName = new login().user_name;
    userName = "test1";
    
    // Query to select details from the files table
    String selectQuery = "SELECT name FROM files WHERE file_name = '" + file_name + "'";
    ResultSet rs = st.executeQuery(selectQuery);

    if (rs.next()) {
        String owner_name = rs.getString("name");
        
        // Insert values into the star table
        String insertStarQuery = "INSERT INTO star (file_name, user_name,owner_name ) VALUES (?, ?, ?)";
        PreparedStatement insertStatement = con.prepareStatement(insertStarQuery);
        
        // Set values for the prepared statement
        insertStatement.setString(1, file_name);
        insertStatement.setString(2, userName);
        insertStatement.setString(3, owner_name);
        
        int starRows = insertStatement.executeUpdate();
        
        if (starRows > 0) {
            // Row inserted successfully
            JOptionPane.showMessageDialog(null, "Record starred successfully");
//            new addFiles().setVisible(true);
//            new starredPage().dispose();
            
            setVisible(false);
        } else {
            // Insertion failed, display an error message
            JOptionPane.showMessageDialog(null, "Failed to star the record");
        }
//        new starredPage().
        insertStatement.close();
    } else {
        // No matching record found in the files table
        JOptionPane.showMessageDialog(null, "No matching record found in files table");
    }
    
    rs.close();
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
}
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply_btn;
    private javax.swing.JButton back_btn;
    private javax.swing.JComboBox<String> filter;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton search_btn;
    private javax.swing.JTextField search_field;
    // End of variables declaration//GEN-END:variables
}
