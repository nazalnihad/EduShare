/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sample_management;

import db_connect.ConnectionProvider;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Random;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author nazal
 */
public class starredPage extends javax.swing.JFrame {

    /**
     * Creates new form starredPage
     */
    
    public starredPage() {
        initComponents();
        populateStarTableWithData();
        star_back_btn.setVisible(false);
        unstar_btn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        search_field = new javax.swing.JTextField();
        unstar_btn = new javax.swing.JButton();
        star_back_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        search_btn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(450, 150));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        search_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_fieldActionPerformed(evt);
            }
        });
        getContentPane().add(search_field, new org.netbeans.lib.awtextra.AbsoluteConstraints(248, 104, 299, 25));

        unstar_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample_management/unstar.png"))); // NOI18N
        unstar_btn.setText("Unstar");
        unstar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unstar_btnActionPerformed(evt);
            }
        });
        getContentPane().add(unstar_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 92, 122, 48));

        star_back_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample_management/back.png"))); // NOI18N
        star_back_btn.setText("Back");
        star_back_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                star_back_btnActionPerformed(evt);
            }
        });
        getContentPane().add(star_back_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(107, 93, -1, 46));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setFillsViewportHeight(true);
        jTable1.setRowHeight(20);
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 180, 710, 305));

        search_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sample_management/search.png"))); // NOI18N
        search_btn.setText("Search");
        search_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_btnActionPerformed(evt);
            }
        });
        getContentPane().add(search_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(597, 93, 102, 46));

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 0), null));

        jLabel1.setFont(new java.awt.Font("Garamond", 1, 36)); // NOI18N
        jLabel1.setText("STARRED FILES");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(341, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(233, 233, 233))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 503, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void populateStarTableWithData() {
    try {
        Connection con = ConnectionProvider.getCon();
        String userName = new login().user_name;
        userName = "test1";

        // Create a PreparedStatement with a parameterized query to get starred file names from the star table
        String selectStarredFilesQuery = "SELECT file_name FROM star WHERE user_name = ?";
        PreparedStatement starredFilesStatement = con.prepareStatement(selectStarredFilesQuery);

        // Set the parameter value
        starredFilesStatement.setString(1, userName);

        // Execute the query to get starred file names
        ResultSet starredFilesResultSet = starredFilesStatement.executeQuery();

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make all cells non-editable
                return false;
            }
        };

        model.setColumnIdentifiers(new Object[]{"Index", "file_name", "file_type", "description", "access"}); // Add "Star" column

        int rowIndex = 1; // Initialize the index
        Random random = new Random();

        // Iterate through starred file names from the star table
        while (starredFilesResultSet.next()) {
            String starredFileName = starredFilesResultSet.getString("file_name");

            // Create a PreparedStatement to get file data from the files table based on starred file name
            String selectFilesQuery = "SELECT * FROM files WHERE file_name = ?";
            PreparedStatement filesStatement = con.prepareStatement(selectFilesQuery);

            // Set the parameter value
            filesStatement.setString(1, starredFileName);

            // Execute the query to get file data
            ResultSet filesResultSet = filesStatement.executeQuery();

            while (filesResultSet.next()) {
                String accessValue = filesResultSet.getInt("public_or_private") == 1 ? "Public" : "Private"; // Convert 1 to "Public" and 0 to "Private"
                boolean isStarred = random.nextBoolean(); // Generate random star data

                // Add data to the table model
                model.addRow(new Object[]{rowIndex, filesResultSet.getString("file_name"), filesResultSet.getString("file_type"), filesResultSet.getString("description"), accessValue, isStarred}); // Add "Index", "accessValue," and "isStarred"
                rowIndex++; // Increment the index
            }

            // Close the filesResultSet and filesStatement
            filesResultSet.close();
            filesStatement.close();
        }

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setModel(model);

        int[] columnWidths = {100, 150, 150, 200, 100}; // Adjust the values as needed for each column, including the "Index" and "access" columns
        int columnIndex = 0;

        for (int width : columnWidths) {
            TableColumn column = jTable1.getColumnModel().getColumn(columnIndex);
            column.setPreferredWidth(width);
            columnIndex++;
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Connection error: " + e.getMessage());
    }
}

    private void search_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_fieldActionPerformed

    private void unstar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unstar_btnActionPerformed
        // TODO add your handling code here:
        String file_name = search_field.getText();
//        new editPage(file_name).setVisible(true);
        this.setVisible(false);
        
         try {
        Connection con = ConnectionProvider.getCon();
        Statement st = con.createStatement();
    
        String userName = new login().user_name; // Assuming user_name is set correctly
        userName = "test1";
        
        // Query to delete the record from the "star" table
        String deleteStarQuery = "DELETE FROM star WHERE file_name = ? AND user_name = ?";
        PreparedStatement deleteStatement = con.prepareStatement(deleteStarQuery);
        
        // Set values for the prepared statement
        deleteStatement.setString(1, file_name);
        deleteStatement.setString(2, userName);
        
        int deletedRows = deleteStatement.executeUpdate();
        
        if (deletedRows > 0) {
            // Record deleted successfully
            JOptionPane.showMessageDialog(null, "Record unstarred successfully");
            populateStarTableWithData();
            unstar_btn.setVisible(false);
//            new addFiles().setVisible(true);
            this.setVisible(true);
        } else {
            // Deletion failed, display an error message
            JOptionPane.showMessageDialog(null, "Failed to unstar the record");
        }
        
        deleteStatement.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
    }
        //        new editPage().setVisible(false);
    }//GEN-LAST:event_unstar_btnActionPerformed

    private void star_back_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_star_back_btnActionPerformed
        // TODO add your handling code here:
        populateStarTableWithData();
        star_back_btn.setVisible(false);
        unstar_btn.setVisible(false);

    }//GEN-LAST:event_star_back_btnActionPerformed

    private void search_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_btnActionPerformed
        // TODO add your handling code here:
        String file_name = search_field.getText();
        if (file_name.equals("")) {
            JOptionPane.showMessageDialog(null, "Enter the file name");
            return;
        } else {
            star_back_btn.setVisible(true);
            unstar_btn.setVisible(true);

            try {
                Connection con = ConnectionProvider.getCon();
                Statement st = con.createStatement();

                DefaultTableModel model = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        // Make all cells non-editable
                        return false;
                    }
                };

                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                jTable1.setModel(model);
                model.setColumnIdentifiers(new Object[]{"index","file_name", "file_type", "description", "access"});

                ResultSet rs = st.executeQuery("SELECT * FROM files WHERE file_name='" + file_name + "'");
                int rowIndex = 1; // Initialize the index

                if (rs.next()) {
                    int publicOrPrivate = rs.getInt("public_or_private");
                    String accessValue = (publicOrPrivate == 1) ? "Public" : "Private";
                    model.addRow(new Object[]{rowIndex,rs.getString("file_name"), rs.getString("file_type"), rs.getString("description"), accessValue});
                    rowIndex++;
                } else {
                    JOptionPane.showMessageDialog(null, "File not found");
                    star_back_btn.setVisible(false);
                    unstar_btn.setVisible(false);

//                    populateTableWithData();
                    return;
                }
                unstar_btn.setVisible(true);
                jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                jTable1.setModel(model);
                int[] columnWidths = {100, 150, 150, 200, 100}; // Adjust the values as needed for each column
                int columnIndex = 0;

                for (int width : columnWidths) {
                    TableColumn column = jTable1.getColumnModel().getColumn(columnIndex);
                    column.setPreferredWidth(width);
                    columnIndex++;
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_search_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(starredPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(starredPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(starredPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(starredPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new starredPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton search_btn;
    private javax.swing.JTextField search_field;
    private javax.swing.JButton star_back_btn;
    private javax.swing.JButton unstar_btn;
    // End of variables declaration//GEN-END:variables
}
